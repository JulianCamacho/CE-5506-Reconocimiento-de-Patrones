class LogisticRegressionN:
    def __init__(self, learning_rate=0.01, max_iter=30000):
        self.learning_rate = learning_rate
        self.max_iter = max_iter

    def fit(self, X, y):
        # Inicializar los pesos
        self.weights = np.zeros(X.shape[1])
        self.bias = 0

        # Gradiente descendiente estocástico
        for i in range(self.max_iter):
            # Tomar una muestra aleatoria
            sample_index = np.random.choice(X.shape[0], 1)
            X_sample = X[sample_index]
            y_sample = y[sample_index]

            # Calcular la predicción y el error
            z = np.dot(X_sample, self.weights) + self.bias
            y_pred = self._sigmoid(z)
            error = y_sample - y_pred

            # Actualizar los pesos
            self.weights += self.learning_rate * np.dot(X_sample.T, error)
            self.bias += self.learning_rate * np.sum(error)

    def predict(self, X):
        # Calcular la probabilidad de pertenecer a la clase positiva
        z = np.dot(X, self.weights) + self.bias
        y_pred = self._sigmoid(z)

        # Convertir la probabilidad en una etiqueta de clase binaria
        return np.round(y_pred)

    def _sigmoid(self, z):
        # Función sigmoide
        return 1 / (1 + np.exp(-z))



============================================================================


# Función para dividir los datos en dos grupos en función de un valor de corte
def split_data(data, split_column, split_value):
    data_below = data[data[split_column] <= split_value]
    data_above = data[data[split_column] > split_value]
    return data_below, data_above

# Función para calcular la entropía de un conjunto de datos
def entropy(data, target_column):
    _, counts = np.unique(data[target_column], return_counts=True)
    probabilities = counts / counts.sum()
    entropy = sum(probabilities * -np.log2(probabilities))
    return entropy

# Función para calcular la ganancia de información al dividir un conjunto de datos en dos grupos
def information_gain(data, split_column, target_column):
    original_entropy = entropy(data, target_column)
    data_below, data_above = split_data(data, split_column, data[split_column].median())
    n = len(data)
    n_below = len(data_below)
    n_above = len(data_above)
    below_weight = n_below / n
    above_weight = n_above / n
    weighted_entropy = below_weight * entropy(data_below, target_column) + above_weight * entropy(data_above, target_column)
    information_gain = original_entropy - weighted_entropy
    return information_gain

# Función para encontrar el mejor atributo de división para un conjunto de datos
def find_best_split(data, target_column):
    information_gains = []
    for column in data.columns:
        if column == target_column:
            continue
        information_gain1 = information_gain(data, column, target_column)
        information_gains.append((column, information_gain1))
    best_split_column, best_information_gain = max(information_gains, key=lambda x: x[1])
    return best_split_column

# Función para crear un nodo de decisión en el árbol
def create_decision_node(data, target_column):
    # Si todos los valores en el conjunto de datos tienen la misma etiqueta, crear un nodo hoja
    if len(np.unique(data[target_column])) == 1:
        return data[target_column].iloc[0]
    
    # Si no hay más atributos para dividir, crear un nodo hoja con la etiqueta más común
    if len(data.columns) == 1:
        return np.bincount(data[target_column]).argmax()
    
    # Encontrar el mejor atributo de división para el conjunto de datos
    best_split_column = find_best_split(data, target_column)
    
    # Crear un nodo de decisión con el mejor atributo de división
    decision_node = {'split_column': best_split_column}
    median = data[best_split_column].median()
    decision_node['median'] = median
    
    # Dividir los datos en dos grupos
    data_below, data_above = split_data(data, best_split_column, median)
    
    # Recursivamente crear los hijos del nodo de decisión
    decision_node['below'] = create_decision_node(data_below, target_column)
    decision_node['above'] = create_decision_node(data_above, target_column)
    
    return decision_node

# Función para predecir la etiqueta de un ejemplo utilizando el árbol de decisión
def predict(example, decision_tree):
    if type(decision_tree) != dict:
        return decision_tree
    split_column = decision_tree['split_column']
    median = decision_tree['median']
    if example[split_column] <= median:
        return predict(example, decision_tree['below'])
    else:
        return predict(example, decision_tree['above'])


# Crear el árbol de decisión a partir del conjunto de entrenamiento
decision_tree = create_decision_node(X_train_wines, y_train_wines)

# Evaluar el árbol de decisión en el conjunto de prueba
y_pred = X_test_wines.apply(lambda x: predict(x, decision_tree), axis=1)
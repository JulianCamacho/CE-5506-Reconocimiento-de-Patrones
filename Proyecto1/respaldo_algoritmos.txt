class LogisticRegressionN:
    def __init__(self, learning_rate=0.01, max_iter=30000):
        self.learning_rate = learning_rate
        self.max_iter = max_iter

    def fit(self, X, y):
        # Inicializar los pesos
        self.weights = np.zeros(X.shape[1])
        self.bias = 0

        # Gradiente descendiente estocástico
        for i in range(self.max_iter):
            # Tomar una muestra aleatoria
            sample_index = np.random.choice(X.shape[0], 1)
            X_sample = X[sample_index]
            y_sample = y[sample_index]

            # Calcular la predicción y el error
            z = np.dot(X_sample, self.weights) + self.bias
            y_pred = self._sigmoid(z)
            error = y_sample - y_pred

            # Actualizar los pesos
            self.weights += self.learning_rate * np.dot(X_sample.T, error)
            self.bias += self.learning_rate * np.sum(error)

    def predict(self, X):
        # Calcular la probabilidad de pertenecer a la clase positiva
        z = np.dot(X, self.weights) + self.bias
        y_pred = self._sigmoid(z)

        # Convertir la probabilidad en una etiqueta de clase binaria
        return np.round(y_pred)

    def _sigmoid(self, z):
        # Función sigmoide
        return 1 / (1 + np.exp(-z))